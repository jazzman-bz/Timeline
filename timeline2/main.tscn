[gd_scene load_steps=6 format=3 uid="uid://bhk2r6ll6102j"]

[ext_resource type="PackedScene" uid="uid://gvscj5tcb6k4" path="res://hand.tscn" id="1_p3sbv"]
[ext_resource type="Texture2D" uid="uid://gbuhciev5w0c" path="res://images/sphere.png" id="2_2cpx0"]
[ext_resource type="PackedScene" uid="uid://d1yu8d4xuagg1" path="res://board.tscn" id="3_d15hh"]

[sub_resource type="GDScript" id="GDScript_kdaxy"]
script/source = "extends Node2D

var cards = []  # Store the card data
var json_file_path = \"res://images_metadata.json\"  # Path to the JSON file

@onready var card_scene: PackedScene = preload(\"res://card.tscn\")
@onready var spawn = $Spawn  # Parent node where cards will be added
@onready var card_count_label = $CardCount/ColorRect/CardCount  # Reference to the CardCount label
@onready var hand = $Hand  # Parent node where cards in the hand will be added
@onready var board = $Board  # Parent node where cards in the hand will be added

func _ready():
	if load_json_file():
		print(\"Cards loaded successfully.\")
	else:
		print(\"Failed to load cards.\")
		return

	var x_offset = 0 # Adjust for spacing
	var y_offset = 0
	var cards_per_row = 5
	var card_index = 0
	
# all cards loaded - lets get their content
	for entry in cards:
		var description = entry.get(\"description\", \"Unknown\")
		print(description)
		var year = entry.get(\"year\", \"Unknown\")
		print(year)
		var image_path = \"res://images/\" + description + \" - \" + year + \".jpg\"
		var image = load(image_path)

		# Create a new card instance
		var card_instance = card_scene.instantiate()
		
		card_instance.add_to_group(\"spawn_cards\")

		# Configure the card instance - image, description and date
		var card_image_node = card_instance.get_node(\"Card_Image2\")
		if card_image_node:
			card_image_node.texture = image

		var card_description_node = card_instance.get_node(\"Card_Template/Card_Description\")
		if card_description_node:
			card_description_node.text = description 
			
		var card_date_node = card_instance.get_node(\"Card_Template/Card_Date\")
		if card_date_node:
			card_date_node.text = year

		# Position the card - erst mal auf den Spawn Punkt.. etwas offset, damit ma sieht es sind viele
		var row = card_index / cards_per_row
		var col = card_index % cards_per_row
		card_instance.position = Vector2(col * x_offset, row * y_offset)

	#
		# Add the card to the spawn node
		spawn.add_child(card_instance)
		
			# Pass the board's Area2D to the card
		var board_area = $Board/Area2D
		card_instance.set_board_area(board_area)
		
		card_index += 1
	update_card_count() 
	
func load_json_file() -> bool:
	var file = FileAccess.open(json_file_path, FileAccess.ModeFlags.READ)
	if file == null:
		print(\"Failed to open JSON file:\", json_file_path)
		return false

	var json_text = file.get_buffer(file.get_length()).get_string_from_utf8()
	var parse_result = JSON.parse_string(json_text)
	if parse_result.has(\"error\") and parse_result[\"error\"] != OK:
		print(\"Error parsing JSON:\", parse_result[\"error_message\"])
		return false

	if parse_result.has(\"result\"):
		cards = parse_result[\"result\"]
	else:
		cards = parse_result
	return true


func _on_button_pressed() -> void:
	
	# ---- first deal hand
	var num_cards_to_move = 5
	var x_offset = 220  # Horizontal spacing between cards in the hand

	if spawn.get_child_count() < num_cards_to_move:
		print(\"Not enough cards in spawn to move!\")
		return

	for i in range(num_cards_to_move):
		# Get the first card from the spawn
		var card_instance = spawn.get_child(0)

		# Move the card to the hand
		move_card_to_hand(card_instance, i * x_offset)

	update_card_count()
	# ---- now first card on board
	num_cards_to_move = 1
	x_offset = 220  # Horizontal spacing between cards in the hand

	if spawn.get_child_count() < num_cards_to_move:
		print(\"Not enough cards in spawn to move!\")
		return

	for i in range(num_cards_to_move):
		# Get the first card from the spawn
		var card_instance = spawn.get_child(0)

		# Move the card to the hand
		move_card_to_board(card_instance, i * x_offset)

	update_card_count()
	

func move_card_to_hand(card_instance, target_x_offset):
	# Remove from spawn and add to hand
	spawn.remove_child(card_instance)
	hand.add_child(card_instance)

	# Set the card's initial position to the spawn's global position
	card_instance.position = spawn.position + Vector2(-200, -700)

	# Calculate the target position in the hand
	var target_position = Vector2(target_x_offset, 0)

	# Animate the movement of the card
	var tween = create_tween()
	tween.tween_property(
		card_instance,
		\"position\",
		target_position,
		0.5
	)

	# Add card to the \"hand_cards\" group
	card_instance.add_to_group(\"hand_cards\")
	

func move_card_to_board(card_instance, target_x_offset):
	# Remove from spawn and add to hand
	
	spawn.remove_child(card_instance)
	board.add_child(card_instance)

	# Set the card's initial position to the spawn's global position
	card_instance.position = spawn.position #

	# Calculate the target position in the hand
	var target_position = Vector2(target_x_offset, 0)+Vector2(800,250)

	# Animate the movement of the card
	var tween = create_tween()
	tween.tween_property(
		card_instance,
		\"position\",
		target_position,
		0.5
	)
	# Add card to the \"board cards\" group
	card_instance.add_to_group(\"board_cards\")

	for card in get_tree().get_nodes_in_group(\"board_cards\"):
		var card_date = card.get_node(\"Card_Template/Card_Date\")
		if card_date:
			card_date.visible = true

func update_card_count():
	# Set the text of the label to the current count of cards in Spawn
	card_count_label.text = str(spawn.get_child_count())
"

[sub_resource type="LabelSettings" id="LabelSettings_1ener"]
font_size = 70
font_color = Color(0.93845, 0.93845, 0.93845, 1)

[node name="Main" type="Node2D"]
position = Vector2(6, 7)
script = SubResource("GDScript_kdaxy")

[node name="Spawn" type="Node2D" parent="."]
position = Vector2(40, 696)

[node name="Hand" parent="." instance=ExtResource("1_p3sbv")]
position = Vector2(370, 696)

[node name="Button" type="Button" parent="."]
offset_left = 52.0
offset_top = 68.0
offset_right = 264.0
offset_bottom = 163.0
toggle_mode = true
action_mode = 0
text = "Start"
expand_icon = true

[node name="CardCount" type="Node2D" parent="."]
position = Vector2(40, 656)

[node name="ColorRect" type="Sprite2D" parent="CardCount"]
scale = Vector2(0.3, 0.3)
texture = ExtResource("2_2cpx0")

[node name="CardCount" type="Label" parent="CardCount/ColorRect"]
offset_top = 7.0
offset_right = 40.0
offset_bottom = 30.0
label_settings = SubResource("LabelSettings_1ener")
horizontal_alignment = 1
vertical_alignment = 1

[node name="Board" parent="." instance=ExtResource("3_d15hh")]
position = Vector2(0, 0)

[connection signal="pressed" from="Button" to="." method="_on_button_pressed"]
